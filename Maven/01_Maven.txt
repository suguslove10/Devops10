														Maven
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=> Maven is a build tool that is used to create the initial project folder structure to develop the source code for the application.
=> Based on the programming language we have different build tools;
	1. Java 	---> Maven 		------ Commonly preferred
	2. Python	---> PyBuilder
	3. Ruby	---> Rakes
	4. .NET	---> MS Build
=> In the project, developers will write the source code of the app, that source code should be compiled before execution, that compilation of project we will do using maven.
=> Maven is used for the projects which are developed by using JPL
=> Maven is also called as Java Build Tool
=> Maven is an open-source s/w and it is available for free of cost.

--------------------------------------
Advantages of using Maven
--------------------------------------
There are four major advantages of working with maven;
1. Using maven we can create the initial project folder structure.

2. Using maven we can download the 'dependencies' that are required to develop the project.

2.1 What is dependency?
Netflix ----> Java ----> Other softwares/tools ----> Dependencies (Spring, SpringBoot...)

House ----> Cement ----> No ----> Other materials: bricks, steel, wood....

2.2 How maven will download the dependencies?
Maven will download the dependencies by using a file which is known as 'pom.xml' file
Whenever we create the initial project folder structure, automatically the pom.xml file will be available
Using pom.xml file we are going to configure the dependencies.
pom.xml ----> Project Object Model
Whatever communication that you want to do with maven, you have to do it through pom.xml file only.

MLA ----> PA

3. Using maven we can compile the source code of the application.

3.1 All the java files will have the extension as '.java'
3.2 .java files will consist of source code of the application which is human understandable language.
3.3. The human understandable language can not be read by the machine.
3.4 Before executing/running the code, we have to convert the human understandable language into machine understandable language (binary code)
3.5 The process of converting the converting human understandable language into machine understandable language is known as Compilation.
3.6 Using maven we can do the compilation
3.7 When we compile the '.java' files, they will be converted into '.class' files
3.8 Inside the .class files the machine understandable language will be available
3.9 Once we get the .class files we can then execute the code and we can see the output also
3.10 To see the output we need the Java Virtual Machine (any system which has the java s/w)

	   compile				execute
.java --------------> .class ------------------> JVM ----------> Output

4. When we have multiple .java files, using maven we can package all the .java files. Once after packaging, we can directly compile them.
4.1 In real time, using java we can develop two major types of applications;	
	1. Standalone application
	2. Web application
	3. Enterprise application
4.2. Based on the type of application, the packaging will get differ
	1. Standalone application		-----> jar file (Java Archive)
	2. Web application			-----> war file (Web Archive)
	3. Enterprise application		-----> ear file (Enterprise Archive)

Standalone applications
-> this type of app doesn't require internet connection to work
-> are limited to a single device
-> in real time we dont create the standalone app
-> standalone app can be packaged as jar file

Web application
-> this type of app require internet connection to work
-> not limited to a single device
-> in real time we will create the webapps
-> webapps app can be packaged as war file

--------------------------------
Maven
--------------------------------
=> Maven is developed by using Java Programming Language
=> All java based project require maven as a build tool
=> Once you install java s/w in local system, you will get two folders;	
		1. JDK - Java Development Kit
		2. JRE - Java Runtime Environment
=> If you are a developer, you need both JDK and JRE in your local system
=> If you are a client, you need only JRE folder
=> Maven is developed by Apache organization

Note: if you want to work with maven, java installation is very much essential

=======================================================================================================
Download & Install Java Software:
------------------------------------------------
~ In order to download the Java Software, we need to create an account in Oracle Website.
~ Weblink: https://www.oracle.com/in/java/technologies/downloads/#jdk21-windows

Configuration of Java Software:
------------------------------------------------
~ After installation of Java Software, we have to set JAVA_HOME in environment variables.
~ The variables which are used by our PC are called environment variables.
~ Two types of environment variables: 1. User Variables 2. System Variables

~ Once after downloading and installing the java s/w, follow the below steps;

Setting up the JAVA_HOME page for system variables:
------------------------------------------------------------------------------
~ C Drive - Program Files - Java - jdk - Copy the jdk folder path - In the search box of PC, type "Environment" and select 'Edit System Environment Varibles' - A dialogue box will open - Advanced - Environment Variables - A dialogue box will open - System Variables - New - A dialogue box will open - Variable Name: JAVA_HOME, Variable Value: <Paste the path of jdk folder> - OK - OK - OK.

Setting up the path for Java:
------------------------------------------
~ C Drive - Program Files - Java - jdk - bin - Copy the bin folder path - In the search box of PC, type Environment and select 'Edit System Environment Varibles' - A dialogue box will open - Advanced - Environment Variables - A dialogue box will open - System Variables - Select the "path" - Edit - New - Paste the path - OK - OK - OK.

How to check whether java is working or not:
----------------------------------------------------------------
~ Open Command Prompt ----> java -version ----> You should see the Java Version Number/Id

How to download Maven from Apache Website:
--------------------------------------------------------------------
~ Google ----> Download apache maven (https://maven.apache.org/download.cgi) ----> "Binary Zip Archive" and click on the link next to it ----> The file gets downloaded in the Zip format ----> Extract the zip file ----> Copy the folder ----> Paste the folder in the C Drive

------------------------------------------------
Configuration of Maven Software:
------------------------------------------------
Setting up the MAVEN_HOME in system environment variables:
---------------------------------------------------------------------------------------------
~ C Drive - Paste the extracted zip folder in C Drive - Apache Maven folder - Copy the folder path - In the search box of PC, type Environment and select 'Edit System Environment Variables - A dialogue box will open - Advanced - Environment Variables - A dialogue box will open - System Variables - New - Variable Name: MAVEN_HOME, Variable Value: <Paste the path of maven folder> - OK - OK - OK.

Setting up the path for Maven:
------------------------------------------
~ C Drive - Apache folder - Bin Folder - Copy the bin folder path - In the search box of PC, type Environment and select 'Edit System Environment Varibles' - A dialogue box will open - Advanced- Environment Variables - A dialogue box will open - System Variables - Select the "path" - Edit - New - Paste the path - OK - OK - OK.

How to check whether Maven is working or not:
----------------------------------------------------------------
~ Open Command Prompt ----> mvn --version ----> You should see the Maven Version Number/Id

========================================================================================================
Maven Terminology:
-------------------------------
Ex: IBM ---> Project (BookmyShow) ---> Java ---> Code ---> bookmyshow.java (Source Code) ---> Compilation (Java Compiler) ---> bookmyshow.class ---> JVM ---> Output

=> Archetype: It represents what type of project we are going to create. It refers to a project template that you can use to quickly set up new projects. It essentially acts as a blueprint containing a basic structure and configuration for a specific type of project.
1) maven-archetype-quickstart ---> It represents the standalone application creation.
2) maven-archetype-webapp ---> It represents the web application creation.
There are 100+ types of architypes

=> group ID: It represents the company name or a project name.
IBM
BookmyShow
Ex: IBM
Ex: BookmyShow
Ex: IBM-BookmyShow

=> Artifact ID: It represents the project name or project module name.
Hotstar (movies, cricket,...) ---> Movies, Cricket...
DevOps ---> Introduction to DevOps, Linux, Maven....
An artifact refers to any file that can be downloaded, installed, or deployed during the build process. It's essentially a piece of code or resource that your project either uses or produces.
PhonePe ---> Transactions, Recharge, Tickets, Bills...
Ex: PhonePe-Transactions
Ex: Hotstar-Movies

=> Packaging: It represents how you want to package your application i.e either war file or jar file.

Standalone App ---> Jar file (multiple .class files will be available)
Web App ---> War file (multiple .class files will be available)

.java file ----> .class file ----> Execute (JVM) ----> Output

1000 .java files ----> Package (jar or war) ----> Execute (JVM) ----> Output

============================================
How to create standalone application using Maven:
============================================
mvn archetype:generate -DgroupId=in.<CompanyName> -DartifactId=<ProjectName> -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

mvn archetype:generate -DgroupId=in.StarAgile -DartifactId=01-Maven-App-StarAgile -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

------------------------------------------------------------------------------------
How to create initial project folder structure for standalone application
------------------------------------------------------------------------------------
D Drive ---> Create a folder (01-Standalone-App) ---> Open Command Prompt in the created folder path ---> Execute the below command

mvn archetype:generate -DgroupId=in.StarAgile -DartifactId=01-Maven-App-StarAgile -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

=> Once the project folder structure is created, we will see two things
1. SRC Folder
1.1. Main Folder - java\in\StarAgile\App.java ---> In ".java" file app source code will be written.
1.2. Test Folder - java\in\StarAgile\AppTest.java ---> In "AppTest.java" file, code testing (J-Unit Test) related info.

2. pom.xml File
Without pom.xml file maven will not work. Whatever work we are going to do in maven, everything will be communicated using pom.xml file only.
Note: Whenever we are executing maven goals we should execute all the maven goals in the pom.xml file path only.

------------------------------------------------------------------------------------
How to add dependencies in the pom.xml file
------------------------------------------------------------------------------------
https://mvnrepository.com/ ---> Search for required dependency (Spring) ----> Copy the syntax and paste in the pom.xml file. ----> Save the file and exit.

Maven will download the dependencies added in the pom.xml.

------------------------
Next topics:
------------------------
1. Maven repositories
2. Maven goals
3. Creating a web application



